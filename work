<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;
        import sailpoint.object.EntitlementDefinition;
        import sailpoint.object.Link;

        Application app = context.getObjectByName(Application.class, "Your-App-Name");
        Schema schema = app.getAccountSchema();

        List values = new ArrayList();
        Map entitlementMap = schema.getEntitlements();
        if (entitlementMap != null) {
          for (String key : entitlementMap.keySet()) {
            Collection entitlements = (Collection) entitlementMap.get(key);
            if (entitlements != null) {
              for (Object ent : entitlements) {
                values.add(ent.toString());
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

Source>
        import sailpoint.object.Application;
        import sailpoint.object.EntitlementDefinition;

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        List values = new ArrayList();

        List entDefs = app.getEntitlementDefinitions();
        for (EntitlementDefinition def : entDefs) {
          if ("entitlement".equals(def.getType())) {
            List ents = def.getValues();
            if (ents != null) {
              for (Object val : ents) {
                values.add(val.toString());
              }
            }
          }
        }

        return values;

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();
        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();
            if (attrs != null) {
              values.addAll(attrs.keySet()); // Just list the attribute names
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>


<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrDefs = schema.getAttributes();

            // This is where the entitlement values are stored for dropdown use
            Object entitlementList = attrDefs.get("entitlement");

            if (entitlementList instanceof Collection) {
              for (Object val : (Collection) entitlementList) {
                if (val != null) {
                  values.add(val.toString());
                }
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;
        import java.util.Iterator;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();

            if (attrs != null && attrs.containsKey("entitlement")) {
              Object rawEntitlements = attrs.get("entitlement");

              if (rawEntitlements != null && rawEntitlements instanceof Iterable) {
                Iterator it = ((Iterable) rawEntitlements).iterator();
                while (it.hasNext()) {
                  Object ent = it.next();
                  if (ent != null) {
                    values.add(ent.toString());
                  }
                }
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();

            if (attrs != null && attrs.containsKey("entitlement")) {
              Object rawEntitlements = attrs.get("entitlement");

              // Instead of casting, use instanceof check and iterate
              try {
                java.lang.reflect.Method iteratorMethod = rawEntitlements.getClass().getMethod("iterator");
                java.util.Iterator it = (java.util.Iterator) iteratorMethod.invoke(rawEntitlements);

                while (it.hasNext()) {
                  Object ent = it.next();
                  if (ent != null) {
                    values.add(ent.toString());
                  }
                }
              } catch (Exception e) {
                values.add("ERROR: " + e.getMessage());
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

import sailpoint.object.Application;
import java.util.List;

List apps = context.getObjects(Application.class);
for (Application app : apps) {
    Object rpaFlag = app.getAttribute("rpaProvision");
    if (rpaFlag != null) {
        System.out.println("App: " + app.getName() + " | RPA Flag: " + rpaFlag);
    }
}



