<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;
        import sailpoint.object.EntitlementDefinition;
        import sailpoint.object.Link;

        Application app = context.getObjectByName(Application.class, "Your-App-Name");
        Schema schema = app.getAccountSchema();

        List values = new ArrayList();
        Map entitlementMap = schema.getEntitlements();
        if (entitlementMap != null) {
          for (String key : entitlementMap.keySet()) {
            Collection entitlements = (Collection) entitlementMap.get(key);
            if (entitlements != null) {
              for (Object ent : entitlements) {
                values.add(ent.toString());
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

Source>
        import sailpoint.object.Application;
        import sailpoint.object.EntitlementDefinition;

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        List values = new ArrayList();

        List entDefs = app.getEntitlementDefinitions();
        for (EntitlementDefinition def : entDefs) {
          if ("entitlement".equals(def.getType())) {
            List ents = def.getValues();
            if (ents != null) {
              for (Object val : ents) {
                values.add(val.toString());
              }
            }
          }
        }

        return values;

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();
        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();
            if (attrs != null) {
              values.addAll(attrs.keySet()); // Just list the attribute names
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>


<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrDefs = schema.getAttributes();

            // This is where the entitlement values are stored for dropdown use
            Object entitlementList = attrDefs.get("entitlement");

            if (entitlementList instanceof Collection) {
              for (Object val : (Collection) entitlementList) {
                if (val != null) {
                  values.add(val.toString());
                }
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;
        import java.util.Iterator;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();

            if (attrs != null && attrs.containsKey("entitlement")) {
              Object rawEntitlements = attrs.get("entitlement");

              if (rawEntitlements != null && rawEntitlements instanceof Iterable) {
                Iterator it = ((Iterable) rawEntitlements).iterator();
                while (it.hasNext()) {
                  Object ent = it.next();
                  if (ent != null) {
                    values.add(ent.toString());
                  }
                }
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

<field displayName="Roles" dynamic="true" multi="true" name="roles" postBack="true" required="true" type="string">
  <AllowedValuesDefinition>
    <Script>
      <Source>
        import sailpoint.object.Application;
        import sailpoint.object.Schema;

        List values = new ArrayList();

        Application app = context.getObjectByName(Application.class, "GLR - GENERAL LEDGER RECONCILIATION COMPLIANCE");

        if (app != null) {
          Schema schema = app.getAccountSchema();
          if (schema != null) {
            Map attrs = schema.getAttributes();

            if (attrs != null && attrs.containsKey("entitlement")) {
              Object rawEntitlements = attrs.get("entitlement");

              // Instead of casting, use instanceof check and iterate
              try {
                java.lang.reflect.Method iteratorMethod = rawEntitlements.getClass().getMethod("iterator");
                java.util.Iterator it = (java.util.Iterator) iteratorMethod.invoke(rawEntitlements);

                while (it.hasNext()) {
                  Object ent = it.next();
                  if (ent != null) {
                    values.add(ent.toString());
                  }
                }
              } catch (Exception e) {
                values.add("ERROR: " + e.getMessage());
              }
            }
          }
        }

        return values;
      </Source>
    </Script>
  </AllowedValuesDefinition>
</field>

import sailpoint.object.Application;
import java.util.List;

List apps = context.getObjects(Application.class);
for (Application app : apps) {
    Object rpaFlag = app.getAttribute("rpaProvision");
    if (rpaFlag != null) {
        System.out.println("App: " + app.getName() + " | RPA Flag: " + rpaFlag);
    }
}

<Rule name="RPAApplicationsRule" type="Generic">
  <Description>Rule to find applications with rpaProvision attribute.</Description>
  <Signature returnType="String"/>
  <Source>
    <![CDATA[
    import sailpoint.object.Application;
    import java.util.List;

    StringBuilder report = new StringBuilder();
    report.append("Application Name, rpaProvision Value\n");

    List apps = context.getObjects(Application.class);

    for (Application app : apps) {
        Object rpaFlag = app.getAttribute("rpaProvision");
        if (rpaFlag != null) {
            report.append(app.getName()).append(", ").append(rpaFlag.toString()).append("\n");
        }
    }

    return report.toString();
    ]]>
  </Source>
</Rule>

<Rule name="RPAApplicationsRule" type="Generic">
  <Description>Generates a list of all applications that have the 'rpaProvision' attribute set.</Description>
  <Signature returnType="String"/>
  <Source>
    <![CDATA[
    import sailpoint.object.Application;
    import java.util.List;

    StringBuilder report = new StringBuilder();
    report.append("Application Name,rpaProvision Value\n");

    List apps = context.getObjects(Application.class);

    for (Application app : apps) {
        Map attrs = app.getAttributes();
        if (attrs != null && attrs.containsKey("rpaProvision")) {
            Object rpaFlag = attrs.get("rpaProvision");
            report.append(app.getName()).append(",").append(String.valueOf(rpaFlag)).append("\n");
        }
    }

    return report.toString();
    ]]>
  </Source>
</Rule>

Custom custom = context.getObjectByName(Custom.class, "BNYM_PoliciesToCheck_Custom");
if (custom != null) {
    Map map = custom.getAttributes();
    List<String> policies = (List<String>) ((Map) map.get("PoliciesToCheck")).get("value");
    if (policies != null) {
        policiesToCheck.addAll(policies);
    }
}

Custom custom = context.getObjectByName(Custom.class, "BNYM_PoliciesToCheck_Custom");
if (custom != null) {
    Map attrs = custom.getAttributes();
    Object obj = attrs.get("PoliciesToCheck");
    if (obj instanceof List) {
        List list = (List) obj;
        for (Object o : list) {
            if (o instanceof String) {
                policiesToCheck.add((String) o);
            }
        }
    }
}

<Rule name="GetRPAEnabledApplications" language="beanshell" type="Generic" xmlns="sailpoint.object">
  <Description>
    This rule searches all applications in the system and returns a list where rpaEnabled == true.
  </Description>
  <Source>
    <![CDATA[
    import sailpoint.object.Application;
    import java.util.ArrayList;
    import java.util.List;

    // List to store applications that have RPA enabled
    List<Application> rpaApps = new ArrayList<>();

    // Get all applications in the system
    List<Application> apps = context.getObjects(Application.class);

    // Iterate through and filter by rpaEnabled = true
    for (Application app : apps) {
        Object val = app.getAttribute("rpaEnabled");
        if (val != null && val instanceof Boolean && ((Boolean)val)) {
            rpaApps.add(app);
        }
    }

    // Return the filtered list
    return rpaApps;
    ]]>
  </Source>
</Rule>


String pType = (String) pv.get("policyType");       // e.g.  "EntitlementSOD", "Advanced"

        /*
         * 2Ô∏è‚É£  ùôéùôÜùôÑùôã  if it's an Entitlement-SOD policy
         *     (add more types if you don‚Äôt want them pre-rejected)
         */
        if ("EntitlementSOD".equalsIgnoreCase(pType) ||
            "RoleSOD".equalsIgnoreCase(pType)) {
            log.debug("Skip pre-reject for SOD policy : " + pv.get("policyName"));
            continue;                       // ‚Üê jump to next violation
        }

*/
    for (Map pv : policyViolations) {

        /* 1Ô∏è‚É£  Grab the policy type (fastest: map key set by IIQ)   */
        String pType = (String) pv.get("policyType");       // e.g.  "EntitlementSOD", "Advanced"

        /*
         * 2Ô∏è‚É£  ùôéùôÜùôÑùôã  if it's an Entitlement-SOD policy
         *     (add more types if you don‚Äôt want them pre-rejected)
         */
        if ("EntitlementSOD".equalsIgnoreCase(pType) ||
            "RoleSOD".equalsIgnoreCase(pType)) {
            log.debug("Skip pre-reject for SOD policy : " + pv.get("policyName"));
            continue;                       // ‚Üê jump to next violation
        }

        /* 3Ô∏è‚É£  Anything that reaches here **will** trigger pre-reject   */
        preReject = true;                   // flag that at least one violation must be auto-rejected
        break;                              // you can break if one is enough; or keep looping
    }

    log.error("Exit  preRejectItemsInViolation : " + preReject);
    return preReject;


public boolean preRejectItemsInViolation(Workflow workflow) {

    log.error("Enter preRejectItemsInViolation");

    boolean preReject = false;                          // üîí start FALSE
    List<Map> policyViolations = workflow.get("policyViolations");
    if (policyViolations == null || policyViolations.isEmpty()) {
        log.debug("No violations");
        return false;
    }

    SailPointContext ctx = workflow.getContext();       // üëá NEW

    for (Map pv : policyViolations) {

        String policyName = (String) pv.get("policyName");
        Policy policy     = ctx.getObjectByName(Policy.class, policyName);   // üëá NEW

        /* ----------  SOD filter  ---------- */
        if (policy != null) {
            String type = policy.getType();             // Advanced | EntitlementSOD | RoleSOD
            log.debug("Policy " + policyName + " type = " + type);

            if ("EntitlementSOD".equalsIgnoreCase(type) ||
                "RoleSOD".equalsIgnoreCase(type)) {
                log.debug("Skip pre-reject for SOD policy: " + policyName);
                continue;                               // go to next violation
            }
        }
        /* ----------  Anything that reaches here WILL trigger pre-reject ---------- */
        preReject = true;                              // set TRUE once, that‚Äôs enough
        break;                                         // optional: exit loop early
    }

    log.error("Exit preRejectItemsInViolation : " + preReject);
    return preReject;
}

for (Map pv : policyViolations) {

    /* ----------  SOD *skip* filter  ---------- */
    String policyName = (String) pv.get("policyName");
    Policy policy     = ctx.getObjectByName(Policy.class, policyName);
    if (policy != null &&
        "EntitlementSOD".equalsIgnoreCase(policy.getType())) {
        log.error("Skip auto-reject for SOD policy : " + policyName);
        continue;                        // jump to next violation
    }
    /* ----------  end filter  ---------- */

    List entsToReject = getViolatingEntsToReject(pv);   // existing code
    ...
}
